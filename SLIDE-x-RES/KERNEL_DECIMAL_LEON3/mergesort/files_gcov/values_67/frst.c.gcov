        -:    0:Source:/home/federico/Scrivania/SLIDE-x-Repository/SLIDE-x/SLIDE-x-BENCH/KERNEL/mergesort/frst.c
        -:    0:Graph:frst.gcno
        -:    0:Data:frst.gcda
        -:    0:Runs:1
        -:    1:#include <stdint.h>
        -:    2:#include <values.h>
        -:    3:
        -:    4:typedef uint8_t TARGET_INDEX;
        -:    5:typedef double TARGET_TYPE;
        -:    6:
function merge called 29 returned 100% blocks executed 100%
       29:    7:void merge(TARGET_INDEX left, TARGET_INDEX right, TARGET_INDEX middle)
        -:    8:{
        -:    9:	// Indexes
       29:   10:	TARGET_INDEX i, j, k = 0;
       29:   11:	TARGET_INDEX i1 = middle - left + 1;
       29:   12:	TARGET_INDEX i2 = right - middle;
        -:   13:
        -:   14:	// Temporary Arrays
       29:   15:	TARGET_TYPE x[size], y[size] = {0};
        -:   16:
        -:   17:	// Copy elements in the temporary arrays x, y
      106:   18:	for(i = 0; i < i1; i++)
unconditional  0 taken 29
branch  1 taken 77
branch  2 taken 29 (fallthrough)
       77:   19:		x[i] = a[left + i];
unconditional  0 taken 77
        -:   20:
      100:   21:	for(i = 0; i < i2; i++)
unconditional  0 taken 29
branch  1 taken 71
branch  2 taken 29 (fallthrough)
       71:   22:		y[i] = a[middle + 1 + i];
unconditional  0 taken 71
        -:   23:	
       29:   24:	i = 0;
       29:   25:	j = 0;
       29:   26:	k = left;
      142:   27:	while(i < i1 && j < i2)
unconditional  0 taken 29
branch  1 taken 128 (fallthrough)
branch  2 taken 14
branch  3 taken 113
branch  4 taken 15 (fallthrough)
        -:   28:	{		
      113:   29:		if(x[i] <= y[j])
branch  0 taken 58 (fallthrough)
branch  1 taken 55
       58:   30:			a[k] = x[i++];
unconditional  0 taken 58
        -:   31:		else
       55:   32:			a[k] = y[j++];
unconditional  0 taken 55
        -:   33:
      113:   34:		k += 1;
unconditional  0 taken 113
        -:   35:	}
        -:   36:	
       48:   37:	while(i < i1)
unconditional  0 taken 29
branch  1 taken 19
branch  2 taken 29 (fallthrough)
        -:   38:	{
       19:   39:		a[k] = x[i];
       19:   40:		i++;
       19:   41:		k++;
unconditional  0 taken 19
        -:   42:	}
        -:   43:	
       45:   44:	while(j < i2)
unconditional  0 taken 29
branch  1 taken 16
branch  2 taken 29 (fallthrough)
        -:   45:	{
       16:   46:		a[k] = y[j];
       16:   47:		j++;
       16:   48:		k++;
unconditional  0 taken 16
        -:   49:	}
       29:   50:}
        -:   51:
function mergesort_0 called 59 returned 100% blocks executed 100%
       59:   52:void mergesort_0(TARGET_INDEX left, TARGET_INDEX right)
        -:   53:{
       59:   54:	if(left < right)
branch  0 taken 29 (fallthrough)
branch  1 taken 30
        -:   55:	{
       29:   56:		TARGET_INDEX middle = left+(right-left)/2;
        -:   57:
       29:   58:		mergesort_0(left, middle);
call    0 returned 29
       29:   59:		mergesort_0(middle+1, right);
call    0 returned 29
        -:   60:
       29:   61:		merge(left, right, middle);
call    0 returned 29
unconditional  1 taken 29
        -:   62:	}
       59:   63:}
        -:   64:
function mergesort called 1 returned 100% blocks executed 100%
        1:   65:void mergesort()
        -:   66:{
        1:   67:	mergesort_0(0, size-1);
call    0 returned 1
        1:   68:}
        -:   69:
function main called 1 returned 100% blocks executed 100%
        1:   70:void main()
        -:   71:{
        1:   72:	mergesort();
call    0 returned 1
        1:   73:}
