        -:    0:Source:/home/federico/Scrivania/SLIDE-x-Repository/SLIDE-x/SLIDE-x-BENCH/KERNEL/bellmanford/frst.c
        -:    0:Graph:frst.gcno
        -:    0:Data:frst.gcda
        -:    0:Runs:1
        -:    1:#include <stdint.h>
        -:    2:#include <values.h>
        -:    3:
        -:    4:typedef double TARGET_TYPE;
        -:    5:typedef uint8_t TARGET_INDEX;
        -:    6:
        -:    7:TARGET_TYPE dist[size];
        -:    8:TARGET_INDEX i, j = 0;
        -:    9:
function bellmanford called 1 returned 100% blocks executed 94%
        1:   10:void bellmanford()
        -:   11:{
        1:   12:	TARGET_INDEX up = 0;
        -:   13:
        -:   14:	// Calculates the maximum value for the current datatype
        1:   15:	up = 1;
       64:   16:	for(i = 0; i < (8*sizeof(TARGET_TYPE)) - 1; i++)
unconditional  0 taken 1
branch  1 taken 63
branch  2 taken 1 (fallthrough)
       63:   17:		up *= 2;
unconditional  0 taken 63
        1:   18:	up -= 1;
        -:   19:
        -:   20:	// Initializes the dist array 
       17:   21:	for(i = 0; i < size; i++)
unconditional  0 taken 1
branch  1 taken 16
branch  2 taken 1 (fallthrough)
       16:   22:		dist[i] = up;
unconditional  0 taken 16
        -:   23:
        -:   24:	
        -:   25:	// Sets the source equal to zero
        1:   26:	dist[0] = 0;
        -:   27:	
       17:   28:	for(i = 0; i < size; i++)
unconditional  0 taken 1
unconditional  1 taken 16
branch  2 taken 16
branch  3 taken 1 (fallthrough)
        -:   29:	{
      272:   30:		for(j = 0; j < size; j++)
unconditional  0 taken 16
unconditional  1 taken 256
branch  2 taken 256
branch  3 taken 16 (fallthrough)
        -:   31:		{
      256:   32:			if(dist[j] + a[i][j] < dist[i] && a[i][j] != -1)
branch  0 taken 130 (fallthrough)
branch  1 taken 126
branch  2 taken 0 (fallthrough)
branch  3 taken 130
    #####:   33:				dist[i] = dist[j] + a[i][j]; 
unconditional  0 never executed
        -:   34:		}
        -:   35:	}
        -:   36:	
        -:   37:	
        1:   38:}
        -:   39:
function make_oriented called 1 returned 100% blocks executed 100%
        1:   40:void make_oriented()
        -:   41:{
       17:   42:	for(i = 0; i < size; i++)
unconditional  0 taken 1
unconditional  1 taken 16
branch  2 taken 16
branch  3 taken 1 (fallthrough)
        -:   43:	{
       16:   44:		a[i][i] = -1;
        -:   45:
        -:   46:		// Makes the last node the goal node 
       16:   47:		a[size-1][i] = -1;
        -:   48:
      272:   49:		for(j = 0; j < size; j++)
unconditional  0 taken 16
unconditional  1 taken 256
branch  2 taken 256
branch  3 taken 16 (fallthrough)
        -:   50:		{
      256:   51:			if(a[i][j] < 0 && i != j && a[i][j] != -1)
branch  0 taken 178 (fallthrough)
branch  1 taken 78
branch  2 taken 162 (fallthrough)
branch  3 taken 16
branch  4 taken 95 (fallthrough)
branch  5 taken 67
        -:   52:			{
       95:   53:				a[i][j] *= -1;
       95:   54:				a[j][i] = -1;
unconditional  0 taken 95
        -:   55:			}
        -:   56:			else
        -:   57:			{
        -:   58:
      161:   59:				if(a[j][i] >= 0)
branch  0 taken 88 (fallthrough)
branch  1 taken 73
       88:   60:					a[i][j] = -1;
unconditional  0 taken 88
        -:   61:			}
        -:   62:		}
        -:   63:	}
        -:   64:
        1:   65:}
        -:   66:
function main called 1 returned 100% blocks executed 100%
        1:   67:void main()
        -:   68:{
        -:   69:
        1:   70:	make_oriented();
call    0 returned 1
        1:   71:	bellmanford();
call    0 returned 1
        1:   72:}
