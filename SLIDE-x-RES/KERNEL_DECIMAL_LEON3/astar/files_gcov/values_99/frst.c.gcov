        -:    0:Source:/home/federico/Scrivania/SLIDE-x-Repository/SLIDE-x/SLIDE-x-BENCH/KERNEL/astar/frst.c
        -:    0:Graph:frst.gcno
        -:    0:Data:frst.gcda
        -:    0:Runs:1
        -:    1:#include <stdint.h>
        -:    2:#include <values.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:typedef double TARGET_TYPE;
        -:    6:typedef uint8_t TARGET_INDEX;
        -:    7:
        -:    8://void prototype(int8_t size, int8_t a[size][size], int8_t goal);
        -:    9:
        -:   10:TARGET_TYPE frontier[size];
        -:   11:TARGET_TYPE frontier_size = 0;
        -:   12:
        -:   13:TARGET_INDEX came_from[size];
        -:   14:TARGET_INDEX current = 0;
        -:   15:
        -:   16:TARGET_TYPE priority = 0;
        -:   17:TARGET_INDEX i;
        -:   18:TARGET_INDEX j;
        -:   19:
function init_camefrom called 1 returned 100% blocks executed 100%
        1:   20:void init_camefrom()
        -:   21:{
        1:   22:	for(i = 0;
unconditional  0 taken 1
       14:   23:		i < size;
branch  0 taken 13
branch  1 taken 1 (fallthrough)
       13:   24:		i++)
       13:   25:		came_from[i] = -1;
unconditional  0 taken 13
        1:   26:}
        -:   27:
function insert called 1 returned 100% blocks executed 100%
        1:   28:void insert(TARGET_INDEX node, TARGET_TYPE priority)
        -:   29:{
        1:   30:	frontier[node] = priority;
        1:   31:	++frontier_size;
        1:   32:}
        -:   33:
function remove_min called 1 returned 100% blocks executed 86%
        1:   34:void remove_min()
        -:   35:{
        1:   36:	TARGET_TYPE min = 127;
        -:   37:
        1:   38:	for(i  = 0;
unconditional  0 taken 1
       14:   39:		i < size;
branch  0 taken 13
branch  1 taken 1 (fallthrough)
       13:   40:		i++)
unconditional  0 taken 13
        -:   41:	{
       13:   42:		if(frontier[i] <= min &&
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:   43:			frontier[i] != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -:   44:		{
    #####:   45:			min = frontier[i];
    #####:   46:			current = i;
unconditional  0 never executed
        -:   47:		}
        -:   48:	}
        -:   49:
        1:   50:	--frontier_size;
        1:   51:	frontier[current] = 0;
        1:   52:}
        -:   53:
function set_estimates called 1 returned 100% blocks executed 100%
        1:   54:void set_estimates()
        -:   55:{
        1:   56:	for(i = 0;
unconditional  0 taken 1
       14:   57:		i < size;
branch  0 taken 13
branch  1 taken 1 (fallthrough)
       13:   58:		i++)
unconditional  0 taken 13
        -:   59:	{
       13:   60:		if(i == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        1:   61:			a[0][0] = 0;
unconditional  0 taken 1
        -:   62:		else
       12:   63:			a[i][i] = 127;
unconditional  0 taken 12
        -:   64:	}
        1:   65:}
        -:   66:
function absolute called 0 returned 0% blocks executed 0%
    #####:   67:TARGET_TYPE absolute(TARGET_TYPE n)
        -:   68:{
    #####:   69:	return n > 0 ? n : -n;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
unconditional  3 never executed
unconditional  4 never executed
        -:   70:}
        -:   71:
function heuristic called 0 returned 0% blocks executed 0%
    #####:   72:TARGET_TYPE heuristic(TARGET_INDEX goal, TARGET_INDEX current, TARGET_TYPE path_cost)
        -:   73:{
        -:   74:
    #####:   75:	if(a[current][goal] > -1)
branch  0 never executed
branch  1 never executed
    #####:   76:		return 1;
unconditional  0 never executed
        -:   77:
        -:   78:	/* Taxicab geometry */
        -:   79:	/* Note: we applied to zero, a cast to int8 type */
    #####:   80:	return absolute((int8_t)0 - (size/2)) + absolute(path_cost - (size/2));
call    0 never executed
call    1 never executed
unconditional  2 never executed
        -:   81:}
        -:   82:
function astarF called 1 returned 100% blocks executed 76%
        1:   83:void astarF(TARGET_TYPE a[size][size])
        -:   84:{
        1:   85:	set_estimates();
call    0 returned 1
        1:   86:	init_camefrom();
call    0 returned 1
        1:   87:	insert(0,0);
call    0 returned 1
        1:   88:	TARGET_TYPE tmp1 = 0;
        -:   89:
        2:   90:	while(frontier_size > 0)
unconditional  0 taken 1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -:   91:	{
        1:   92:		remove_min();
call    0 returned 1
        -:   93:
        1:   94:		if(current == goal)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   95:			break;
unconditional  0 never executed
        -:   96:
        1:   97:		for(i = 0;
unconditional  0 taken 1
       14:   98:			i < size;
branch  0 taken 13
branch  1 taken 1 (fallthrough)
       13:   99:			i++)
unconditional  0 taken 13
        -:  100:		{
       13:  101:			if(a[current][i] != -1 &&   //
branch  0 taken 8 (fallthrough)
branch  1 taken 5
        8:  102:				a[current][current] + a[current][i] < a[i][i])
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -:  103:			{
    #####:  104:				a[i][i] = a[current][current] + a[current][i];
    #####:  105:				priority = a[i][i] + heuristic(goal, i, a[i][i]);
call    0 never executed
    #####:  106:				insert(i, priority);
call    0 never executed
    #####:  107:				came_from[i] = current;
unconditional  0 never executed
        -:  108:			}
        -:  109:
        -:  110:		}
        -:  111:	}
        1:  112:}
        -:  113:
function astar called 1 returned 100% blocks executed 100%
        1:  114:void astar()
        -:  115:{
        1:  116:	for(i = 0;
unconditional  0 taken 1
       14:  117:		i < size;
branch  0 taken 13
branch  1 taken 1 (fallthrough)
       13:  118:		i++)
unconditional  0 taken 13
        -:  119:	{
       13:  120:		a[i][i] = -1;
        -:  121:
        -:  122:		/* Makes the last node the goal node */
       13:  123:		a[size-1][i] = -1;
        -:  124:
       13:  125:		for(j = 0;
unconditional  0 taken 13
      182:  126:			j < size;
branch  0 taken 169
branch  1 taken 13 (fallthrough)
      169:  127:			j++)
unconditional  0 taken 169
        -:  128:		{
      169:  129:			if(a[i][j] < 0
branch  0 taken 111 (fallthrough)
branch  1 taken 58
      111:  130:				&& i != j
branch  0 taken 98 (fallthrough)
branch  1 taken 13
       98:  131:				&& a[i][j] != -1 )
branch  0 taken 53 (fallthrough)
branch  1 taken 45
        -:  132:			{
       53:  133:				a[i][j] *= -1;
       53:  134:				a[j][i] = -1;
unconditional  0 taken 53
        -:  135:			}
        -:  136:			else
        -:  137:			{
        -:  138:
      116:  139:				if(a[j][i] >= 0)
branch  0 taken 67 (fallthrough)
branch  1 taken 49
       67:  140:					a[i][j] = -1;
unconditional  0 taken 67
        -:  141:			}
        -:  142:		}
        -:  143:	}
        1:  144:	astarF(a);
call    0 returned 1
        1:  145:}
        -:  146:
function main called 1 returned 100% blocks executed 100%
        1:  147:void main()
        -:  148:{
        1:  149:	astar();
call    0 returned 1
        1:  150:}
