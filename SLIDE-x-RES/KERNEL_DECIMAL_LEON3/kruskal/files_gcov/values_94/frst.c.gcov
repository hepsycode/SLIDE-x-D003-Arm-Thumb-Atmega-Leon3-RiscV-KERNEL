        -:    0:Source:/home/federico/Scrivania/SLIDE-x-Repository/SLIDE-x/SLIDE-x-BENCH/KERNEL/kruskal/frst.c
        -:    0:Graph:frst.gcno
        -:    0:Data:frst.gcda
        -:    0:Runs:1
        -:    1:#include <stdint.h>
        -:    2:#include <values.h>
        -:    3:
        -:    4:typedef double TARGET_TYPE;
        -:    5:typedef uint64_t TARGET_INDEX;
        -:    6:
        -:    7:
        -:    8:/* This data structure is used to maintain the disjoint sets */
        -:    9:TARGET_TYPE union_find[size];
        -:   10:
        -:   11:/* Indexes used to iterate a bidimensional matrix */
        -:   12:TARGET_INDEX i = 0; 
        -:   13:TARGET_INDEX j = 0;
        -:   14:
        -:   15:/* Indexes used in find_min() */
        -:   16:TARGET_INDEX k = 0;
        -:   17:TARGET_INDEX z = 0; 
        -:   18:
        -:   19:/* Indexes used to store node_A and node_B of minimum edge cost */
        -:   20:TARGET_INDEX x = 0;
        -:   21:TARGET_INDEX y = 0;
        -:   22:
        -:   23:/* Variable useful during find_min() function */
        -:   24:TARGET_TYPE min = 0;
        -:   25:
        -:   26:TARGET_TYPE edge_number = 0;
        -:   27:
        -:   28:/* This function return 1 if the graph is connected else 0 */
function is_connected called 1 returned 100% blocks executed 92%
        1:   29:TARGET_TYPE is_connected()
        -:   30:{
        1:   31:	for(i = 0; 
unconditional  0 taken 1
       11:   32:		i < size;
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:   33:		i++)
unconditional  0 taken 10
        -:   34:	{
       10:   35:		for(j = 0;
unconditional  0 taken 10
       11:   36:			j < size;
branch  0 taken 11
branch  1 taken 0 (fallthrough)
        1:   37:			j++)
unconditional  0 taken 1
        -:   38:		{
        -:   39:			/* Break if there is at least a connected node */
       11:   40:			if(i != j &&
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:   41:			   a[i][j] != -1)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:   42:				break;
unconditional  0 taken 10
        -:   43:		}
        -:   44:
       10:   45:		if(j == size)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:   46:			return 0;
unconditional  0 never executed
        -:   47:	}
        -:   48:
        1:   49:	return 1;
unconditional  0 taken 1
        -:   50:}
        -:   51:
        -:   52:/* 
        -:   53: * This function finds the edge with minimum cost
        -:   54: */
function find_min called 45 returned 100% blocks executed 90%
       45:   55:void find_min()
        -:   56:{
       45:   57:	min = 127;
        -:   58:
       45:   59:	for(k = 0;
unconditional  0 taken 45
      450:   60:		k < size-1;
branch  0 taken 405
branch  1 taken 45 (fallthrough)
      405:   61:		k++)
unconditional  0 taken 405
        -:   62:	{
      405:   63:		for(z = k;
unconditional  0 taken 405
     2835:   64:			z < size;
branch  0 taken 2430
branch  1 taken 405 (fallthrough)
     2430:   65:			z++)
unconditional  0 taken 2430
        -:   66:		{
     2430:   67:			if(a[k][z] <= min && 
branch  0 taken 405 (fallthrough)
branch  1 taken 2025
      405:   68:				a[k][z] != -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 405
        -:   69:			{
    #####:   70:				min = a[k][z];
        -:   71:
        -:   72:				/* This two assignments saves the nodes of minimum cost edge */
    #####:   73:				x = k;
    #####:   74:				y = z;
unconditional  0 never executed
        -:   75:			}
        -:   76:		}
        -:   77:	}
        -:   78:
        -:   79:	/* This statement is done to avoid this position in the next call of find_min() */
       45:   80:	a[x][y] = -1;
       45:   81:}
        -:   82:
        -:   83:/*
        -:   84: * The graph is generated casually so we can have an oriented graph.
        -:   85: * This requirements of the algorithm forces the input to be a non oriented graph
        -:   86: * This function makes the input graph a non oriented graph. 
        -:   87: */
        -:   88:
function make_non_oriented called 1 returned 100% blocks executed 100%
        1:   89:void make_non_oriented()
        -:   90:{
        1:   91:	for(i = 0; 
unconditional  0 taken 1
       11:   92:		i < size; 
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:   93:		i++)
unconditional  0 taken 10
        -:   94:	{
       10:   95:		a[i][i] = -1;
        -:   96:
       10:   97:		for(j = 0; 
unconditional  0 taken 10
      110:   98:			j < size; 
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:   99:			j++)
        -:  100:		{
        -:  101:			/*
        -:  102:			if(a[i][j] >= 0)
        -:  103:				a[j][i] = a[i][j];
        -:  104:			*/
        -:  105:
      100:  106:			if(a[i][j] < 0 && 
branch  0 taken 31 (fallthrough)
branch  1 taken 69
       31:  107:				i != j)
branch  0 taken 21 (fallthrough)
branch  1 taken 10
       21:  108:				a[i][j] *= -1;
unconditional  0 taken 21
        -:  109:				
        -:  110:
      100:  111:			a[j][i] = a[i][j];
unconditional  0 taken 100
        -:  112:
        -:  113:		}
        -:  114:	}
        1:  115:}
        -:  116:
        -:  117:/* 
        -:  118: * This function initializes the array union_find wich will be used to store
        -:  119: * disjoints set
        -:  120: */
function init_union_find called 1 returned 100% blocks executed 100%
        1:  121:void init_union_find()
        -:  122:{
        1:  123:	for(i = 0; 
unconditional  0 taken 1
       11:  124:		i < size; 
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:  125:		i++)
        -:  126:	{
       10:  127:		union_find[i] = -1;
unconditional  0 taken 10
        -:  128:	}
        1:  129:}
        -:  130:
        -:  131:/* This function merge two disjoint sets */
function union_sets called 0 returned 0% blocks executed 0%
    #####:  132:void union_sets()
        -:  133:{	
    #####:  134:	z = union_find[y];
        -:  135:
    #####:  136:	for(k = 0;
unconditional  0 never executed
    #####:  137:		k < size;
branch  0 never executed
branch  1 never executed
    #####:  138:		k++)
unconditional  0 never executed
        -:  139:	{
    #####:  140:		if(union_find[k] == z)
branch  0 never executed
branch  1 never executed
    #####:  141:			union_find[k] = union_find[x];
unconditional  0 never executed
        -:  142:	}
        -:  143:
    #####:  144:}
        -:  145:
        -:  146:/* Given a node, this function returns the name of the set in which is cointained */
function find called 90 returned 100% blocks executed 100%
       90:  147:TARGET_TYPE find(TARGET_INDEX node)
        -:  148:{
       90:  149:	return union_find[node];
unconditional  0 taken 90
        -:  150:}
        -:  151:
        -:  152:/* make_set() creates a set only containing a single element */
function make_set called 10 returned 100% blocks executed 100%
       10:  153:void make_set(TARGET_INDEX node)
        -:  154:{
       10:  155:	union_find[node] = node;
       10:  156:}
        -:  157:
        -:  158:/* Function for debugging  
        -:  159:void print_sets()
        -:  160:{
        -:  161:	int8_t w;
        -:  162:	for(w = 0; 
        -:  163:		w < size; 
        -:  164:		w++)
        -:  165:		printf("%d ", union_find[w]);
        -:  166:
        -:  167:	printf("\n");
        -:  168:}
        -:  169:*/
        -:  170:/* This function counts how much edges we have in the graph */
function count_edges called 1 returned 100% blocks executed 100%
        1:  171:void count_edges()
        -:  172:{
        1:  173:	for(i = 0; 
unconditional  0 taken 1
       11:  174:		i < size; 
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:  175:		i++)
unconditional  0 taken 10
        -:  176:	{
       10:  177:		for(j = i; 
unconditional  0 taken 10
       65:  178:			j < size; 
branch  0 taken 55
branch  1 taken 10 (fallthrough)
       55:  179:			j++)
unconditional  0 taken 55
        -:  180:		{
       55:  181:			if(a[i][j] != -1)
branch  0 taken 45 (fallthrough)
branch  1 taken 10
       45:  182:				edge_number++;
unconditional  0 taken 45
        -:  183:		}
        -:  184:	}
        1:  185:}
        -:  186:
        -:  187:/* 
        -:  188: * This is the function that implements the algorithm, at the end we will find the 
        -:  189: * edges with minimum cost in the double dimension matrix in input
        -:  190: */
        -:  191:
function kruskal called 1 returned 100% blocks executed 93%
        1:  192:void kruskal()
        -:  193:{
        1:  194:	count_edges();
call    0 returned 1
        -:  195:
        -:  196:	/* For each vertex in the graph, make_set() */
        1:  197:	for(i = 0; 
unconditional  0 taken 1
       11:  198:		i < size; 
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:  199:		i++)
unconditional  0 taken 10
       10:  200:		make_set(i);
call    0 returned 10
        -:  201:
        -:  202:	/* For each edge in G choosen in non decreasing order */
        1:  203:	for(i = 0;
unconditional  0 taken 1
       46:  204:		i < edge_number;
branch  0 taken 45
branch  1 taken 1 (fallthrough)
       45:  205:		i++)
unconditional  0 taken 45
        -:  206:	{
       45:  207:		find_min();
call    0 returned 45
        -:  208:
       45:  209:		if(find(x) != find(y))
call    0 returned 45
call    1 returned 45
branch  2 taken 0 (fallthrough)
branch  3 taken 45
    #####:  210:			union_sets();
call    0 never executed
unconditional  1 never executed
        -:  211:		else
        -:  212:		{
       45:  213:			a[x][y] = -1;
       45:  214:			a[y][x] = -1;
unconditional  0 taken 45
        -:  215:		}
        -:  216:	}
        -:  217:
        1:  218:}
        -:  219:
function main called 1 returned 100% blocks executed 100%
        1:  220:void main()
        -:  221:{
        1:  222:	make_non_oriented();
call    0 returned 1
        1:  223:	init_union_find();
call    0 returned 1
        -:  224:
        1:  225:	if(is_connected())
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  226:		kruskal();
call    0 returned 1
unconditional  1 taken 1
        1:  227:}
