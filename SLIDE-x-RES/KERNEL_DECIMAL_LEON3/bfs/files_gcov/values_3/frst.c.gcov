        -:    0:Source:/home/federico/Scrivania/SLIDE-x-Repository/SLIDE-x/SLIDE-x-BENCH/KERNEL/bfs/frst.c
        -:    0:Graph:frst.gcno
        -:    0:Data:frst.gcda
        -:    0:Runs:1
        -:    1:#include <stdint.h>
        -:    2:#include <values.h>
        -:    3:
        -:    4:typedef double TARGET_TYPE;
        -:    5:typedef uint8_t TARGET_INDEX;
        -:    6:
        -:    7:TARGET_INDEX current, i, tail, head = 0;
        -:    8:TARGET_TYPE visited[size];
        -:    9:
function enqueue called 29 returned 100% blocks executed 100%
       29:   10:void enqueue(TARGET_TYPE par)
        -:   11:{
       29:   12:	if((tail-head) != size-1)
branch  0 taken 29 (fallthrough)
branch  1 taken 0
        -:   13:	{
       29:   14:		visited[tail] = par;
       29:   15:		tail = (tail+1) % size;
unconditional  0 taken 29
        -:   16:	}
       29:   17:}
        -:   18:
function dequeue called 29 returned 100% blocks executed 100%
       29:   19:TARGET_TYPE dequeue()
        -:   20:{
       29:   21:	TARGET_TYPE element = 0;
        -:   22:
       29:   23:	if(head != tail)
branch  0 taken 29 (fallthrough)
branch  1 taken 0
        -:   24:	{	
       29:   25:		element = visited[head];
       29:   26:		head = (head+1) % size;
unconditional  0 taken 29
        -:   27:	}
        -:   28:
       29:   29:	return element;
unconditional  0 taken 29
        -:   30:}
        -:   31:
function clean_input called 0 returned 0% blocks executed 0%
    #####:   32:void clean_input()
        -:   33:{
    #####:   34:	head, tail = 0;
        -:   35:
    #####:   36:	for(i = 0; i < size; i++) {
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
    #####:   37:		visited[i] = 0;
    #####:   38:		a[i][i] = -1;
unconditional  0 never executed
        -:   39:	}
    #####:   40:}
        -:   41:
function bfs called 1 returned 100% blocks executed 100%
        1:   42:void bfs()
        -:   43:{
        -:   44:	/* 
        -:   45:	 * We store a -1 in a[node][node] position to indicate that a node has been already visited
        -:   46:	 */
        -:   47:
        1:   48:	a[0][0] = -2;
        1:   49:	enqueue(0);
call    0 returned 1
        -:   50:
       30:   51:	while(head != tail)
unconditional  0 taken 1
branch  1 taken 29
branch  2 taken 1 (fallthrough)
        -:   52:	{
       29:   53:		current = dequeue();
call    0 returned 29
      870:   54:		for(i  = 0; i < size; i++)
unconditional  0 taken 29
unconditional  1 taken 841
branch  2 taken 841
branch  3 taken 29 (fallthrough)
        -:   55:		{	
      841:   56:			if(a[i][i] != -2 && a[current][i] > 0)	
branch  0 taken 59 (fallthrough)
branch  1 taken 782
branch  2 taken 28 (fallthrough)
branch  3 taken 31
        -:   57:			{
       28:   58:				enqueue(i);
call    0 returned 28
       28:   59:				a[i][i] =  -2;
unconditional  0 taken 28
        -:   60:			}
        -:   61:		}
        -:   62:	}
        1:   63:}
        -:   64:
function main called 1 returned 100% blocks executed 100%
        1:   65:void main()
        -:   66:{
        -:   67:	// clean_input();
        1:   68:	bfs();
call    0 returned 1
        1:   69:}
